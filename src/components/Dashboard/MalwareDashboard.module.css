.dashboardContainer {
  padding: 2rem;
  min-height: 100vh;
  background-color: var(--bg-color);
  color: var(--text-color);
  transition: background-color 0.3s, color 0.3s;
}

.dashboardHeader {
  margin-bottom: 2rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.dashboardHeader h1 {
  font-size: 2rem;
  font-weight: 600;
  color: var(--text-color);
}

.headerActions {
  display: flex;
  gap: 1rem;
}

.runScanButton {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.runScanButton:hover:not(:disabled) {
  background-color: var(--primary-hover); /* Use existing variable */
  transform: translateY(-2px);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Consider var(--shadow-color) here if appropriate */
}

.runScanButton:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

.runScanButton.scanning {
  background-color: var(--primary-color);
  animation: pulse 1.5s infinite;
}

.scanIcon {
  font-size: 1.25rem;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

@keyframes pulse {
  0% {
    box-shadow: 0 0 0 0 rgba(var(--primary-color-rgb-values), 0.5); /* Use defined RGB values */
  }
  70% {
    box-shadow: 0 0 0 10px rgba(var(--primary-color-rgb-values), 0); /* Use defined RGB values */
  }
  100% {
    box-shadow: 0 0 0 0 rgba(var(--primary-color-rgb-values), 0); /* Use defined RGB values */
  }
}

.dashboardContent {
  display: grid;
  gap: 2rem;
}

.section {
  background-color: var(--bg-color); /* Mapped from --bg-secondary */
  border-radius: 12px;
  padding: 1.5rem;
  box-shadow: 0 4px 6px var(--shadow-color); /* Use theme shadow */
}

.sectionHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.sectionHeader h2 {
  font-size: 1.5rem;
  font-weight: 600;
  color: var(--text-color);
}

.refreshButton {
  padding: 0.5rem 1rem;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 80px;
}

.refreshButton:hover:not(:disabled) {
  background-color: var(--primary-hover); /* Use existing variable */
  transform: translateY(-2px);
  box-shadow: 0 4px 6px var(--shadow-color); /* Use theme shadow */
}

.refreshButton:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

.refreshing {
  background-color: var(--primary-color);
  animation: pulse 1.5s infinite;
}

.loadingSpinner {
  display: inline-block;
  animation: spin 1.5s linear infinite;
  font-size: 1.2rem;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* Process Table Styles */
.tableContainer {
  overflow-x: auto;
}

.processTable {
  width: 100%;
  border-collapse: collapse;
  margin-top: 1rem;
}

.processTable th,
.processTable td {
  padding: 1rem;
  text-align: left;
  border-bottom: 1px solid var(--border-color);
}

.processTable th {
  font-weight: 600;
  color: var(--text-secondary);
  background-color: var(--hover-bg); /* Use theme variable */
}

.processTable tr:hover {
  background-color: var(--hover-bg); /* Use theme variable */
}

.status {
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.875rem;
  font-weight: 500;
}

.running {
  background-color: var(--success-bg); /* Use theme variable */
  color: var(--success-text); /* Use theme variable */
}

.actionButton {
  padding: 0.5rem 1rem;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 500;
  transition: background-color 0.2s;
}

.actionButton:hover {
  background-color: var(--primary-hover); /* Use existing variable */
}

/* Alerts Styles */
.alertsContainer {
  display: grid;
  gap: 1rem;
}

.alertCard {
  padding: 1.5rem;
  border-radius: 8px;
  background-color: var(--card-bg); /* Mapped from --bg-primary */
  border: 1px solid var(--border-color);
}

.alertCard.high {
  border-left: 4px solid var(--severity-high-text); /* Use theme variable */
}

.alertCard.medium {
  border-left: 4px solid var(--warning-text); /* Use theme variable */
}

.alertCard.low {
  border-left: 4px solid var(--success-text); /* Use theme variable */
}

.alertHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.alertSeverity {
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.875rem;
  font-weight: 500;
}

.high .alertSeverity {
  background-color: var(--severity-high-bg); /* Use theme variable */
  color: var(--severity-high-text); /* Use theme variable */
}

.medium .alertSeverity {
  background-color: var(--warning-bg); /* Use theme variable */
  color: var(--warning-text); /* Use theme variable */
}

.low .alertSeverity {
  background-color: var(--success-bg); /* Use theme variable */
  color: var(--success-text); /* Use theme variable */
}

.alertStatus {
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.875rem;
  font-weight: 500;
}

.active { /* Assuming 'active' alert means high severity or error-like */
  background-color: var(--severity-high-bg); /* Use theme variable */
  color: var(--severity-high-text); /* Use theme variable */
}

.resolved { /* Assuming 'resolved' means success-like */
  background-color: var(--success-bg); /* Use theme variable */
  color: var(--success-text); /* Use theme variable */
}

.alertCard h3 {
  font-size: 1.1rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: var(--text-color);
}

.alertCard p {
  color: var(--text-secondary);
  margin-bottom: 1rem;
}

.alertFooter {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.timestamp {
  color: var(--text-secondary);
  font-size: 0.875rem;
}

/* Responsive Design */
@media (max-width: 768px) {
  .dashboardContainer {
    padding: 1rem;
  }

  .dashboardHeader {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .headerActions {
    width: 100%;
  }

  .runScanButton {
    width: 100%;
    justify-content: center;
  }

  .section {
    padding: 1rem;
  }

  .processTable th,
  .processTable td {
    padding: 0.75rem;
  }

  .alertCard {
    padding: 1rem;
  }
}

/* Hash Search Styles */
.hashSearch {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
}

.hashInput {
  flex: 1;
  padding: 0.75rem 1rem;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background-color: var(--input-bg); /* Consistent with other inputs */
  color: var(--text-color);
  font-size: 0.875rem;
}

.hashInput:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb-values), 0.2); /* Use RGB values */
  color: var(--text-color);
}

.hashResults {
  background-color: var(--card-bg); /* Mapped from --bg-primary */
  border: 1px solid var(--border-color);
  border-radius: 8px;
  padding: 1rem;
  margin-top: 1rem;
}

.resultHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.detectionBadge {
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.875rem;
  font-weight: 600;
}

.malicious {
  background-color: var(--severity-high-bg); /* Use theme variable */
  color: var(--severity-high-text); /* Use theme variable */
}

.clean {
  background-color: var(--success-bg); /* Use theme variable */
  color: var(--success-text); /* Use theme variable */
}

.resultDetails {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.resultDetails p {
  margin: 0;
  font-size: 0.875rem;
}

.engineResults {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  margin-top: 0.5rem;
  padding-top: 0.5rem;
  border-top: 1px solid var(--border-color);
}

.engineResult {
  display: flex;
  gap: 0.5rem;
  font-size: 0.875rem;
}

.vendor {
  font-weight: 600;
  color: var(--text-color);
}

.detection {
  color: var(--text-secondary);
}

/* Entire .darkMode block removed, styles are now handled by variables */