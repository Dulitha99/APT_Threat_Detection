import React, { useState } from 'react';
import { useTheme } from '../../context/ThemeContext';
import styles from './MalwareDashboard.module.css';

const MalwareDashboard: React.FC = () => {
  const { theme } = useTheme();
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [hashSearch, setHashSearch] = useState('');
  const [hashResults, setHashResults] = useState<any>(null);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [isHashSearching, setIsHashSearching] = useState(false);

  // Dummy data for running processes
  const runningProcesses = [
    { id: 1, name: 'chrome.exe', pid: '1234', cpu: '2.5%', memory: '156MB', status: 'Running' },
    { id: 2, name: 'explorer.exe', pid: '2345', cpu: '1.2%', memory: '89MB', status: 'Running' },
    { id: 3, name: 'svchost.exe', pid: '3456', cpu: '0.8%', memory: '45MB', status: 'Running' },
    { id: 4, name: 'firefox.exe', pid: '4567', cpu: '3.1%', memory: '178MB', status: 'Running' },
    { id: 5, name: 'code.exe', pid: '5678', cpu: '4.2%', memory: '245MB', status: 'Running' },
  ];

  // Dummy data for alerts
  const alerts = [
    { 
      id: 1, 
      severity: 'High',
      title: 'Suspicious Process Detected',
      description: 'Unknown process attempting to access system files',
      timestamp: '2024-03-20 14:30:22',
      status: 'Active'
    },
    { 
      id: 2, 
      severity: 'Medium',
      title: 'Unusual Network Activity',
      description: 'Multiple connection attempts to unknown IP addresses',
      timestamp: '2024-03-20 14:28:15',
      status: 'Active'
    },
    { 
      id: 3, 
      severity: 'Low',
      title: 'File Modification Alert',
      description: 'System file modification detected in Windows directory',
      timestamp: '2024-03-20 14:25:10',
      status: 'Resolved'
    },
    { 
      id: 4, 
      severity: 'High',
      title: 'Malware Signature Detected',
      description: 'Known malware signature found in temporary files',
      timestamp: '2024-03-20 14:20:05',
      status: 'Active'
    },
  ];

  const handleRunScan = () => {
    setIsScanning(true);
    setScanProgress(0);
    
    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          return 100;
        }
        return prev + 10;
      });
    }, 500);
  };

  const handleHashSearch = () => {
    setIsHashSearching(true);
    // Simulate API call with dummy data
    const dummyResults = {
      hash: hashSearch,
      lastAnalysis: '2024-03-20 15:30:00',
      detectionRatio: '45/75',
      isMalicious: true,
      type: 'Win32 EXE',
      firstSeen: '2024-03-19',
      topEngineResults: [
        { vendor: 'Microsoft', result: 'Trojan:Win32/Malware.ABC' },
        { vendor: 'Kaspersky', result: 'HEUR:Trojan.Win32.Generic' },
        { vendor: 'Symantec', result: 'W32.MalwareX' }
      ]
    };
    
    // Simulate API call delay
    setTimeout(() => {
      setHashResults(dummyResults);
      setIsHashSearching(false);
    }, 1500);
  };

  const handleRefresh = () => {
    setIsRefreshing(true);
    // Simulate API call delay
    setTimeout(() => {
      setIsRefreshing(false);
    }, 1500);
  };

  return (
    <div className={`${styles.dashboardContainer} ${theme === 'dark' ? styles.darkMode : ''}`}>
      <div className={styles.dashboardHeader}>
        <h1>Malware Dashboard</h1>
        <div className={styles.headerActions}>
          <button 
            className={`${styles.runScanButton} ${isScanning ? styles.scanning : ''}`}
            onClick={handleRunScan}
            disabled={isScanning}
          >
            {isScanning ? (
              <span>Scanning... {scanProgress}%</span>
            ) : (
              <span>Run Scan</span>
            )}
          </button>
        </div>
      </div>

      <div className={styles.dashboardContent}>
        <div className={styles.section}>
          <div className={styles.sectionHeader}>
            <h2>Hash Search</h2>
            </div>
          <div className={styles.hashSearch}>
            <input
              type="text"
              placeholder="Enter file hash (MD5, SHA-1, SHA-256)"
              value={hashSearch}
              onChange={(e) => setHashSearch(e.target.value)}
              className={styles.hashInput}
            />
            <button 
              className={`${styles.actionButton} ${isHashSearching ? styles.refreshing : ''}`}
              onClick={handleHashSearch}
              disabled={isHashSearching}
            >
              {isHashSearching ? (
                <span className={styles.loadingSpinner}>↻</span>
              ) : (
                'Search Hash'
              )}
            </button>
          </div>
          {hashResults && (
            <div className={styles.hashResults}>
              <div className={styles.resultHeader}>
                <span className={`${styles.detectionBadge} ${hashResults.isMalicious ? styles.malicious : styles.clean}`}>
                  {hashResults.detectionRatio}
                </span>
                <span className={styles.timestamp}>Last analyzed: {hashResults.lastAnalysis}</span>
              </div>
              <div className={styles.resultDetails}>
                <p><strong>Type:</strong> {hashResults.type}</p>
                <p><strong>First Seen:</strong> {hashResults.firstSeen}</p>
                <div className={styles.engineResults}>
                  {hashResults.topEngineResults.map((result: any, index: number) => (
                    <div key={index} className={styles.engineResult}>
                      <span className={styles.vendor}>{result.vendor}:</span>
                      <span className={styles.detection}>{result.result}</span>
                    </div>
                  ))}
            </div>
              </div>
            </div>
          )}
              </div>

        <div className={styles.section}>
          <div className={styles.sectionHeader}>
            <h2>Running Processes</h2>
            <button 
              className={`${styles.refreshButton} ${isRefreshing ? styles.refreshing : ''}`}
              onClick={handleRefresh}
              disabled={isRefreshing}
            >
              {isRefreshing ? (
                <span className={styles.loadingSpinner}>↻</span>
              ) : (
                'Refresh'
              )}
            </button>
            </div>
          <div className={styles.tableContainer}>
            <table className={styles.processTable}>
              <thead>
                <tr>
                  <th>Process Name</th>
                  <th>PID</th>
                  <th>CPU Usage</th>
                  <th>Memory Usage</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {runningProcesses.map(process => (
                  <tr key={process.id}>
                    <td>{process.name}</td>
                    <td>{process.pid}</td>
                    <td>{process.cpu}</td>
                    <td>{process.memory}</td>
                    <td>
                      <span className={`${styles.status} ${styles.running}`}>
                        {process.status}
                      </span>
                    </td>
                    <td>
                      <button className={styles.actionButton}>Details</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        <div className={styles.section}>
          <div className={styles.sectionHeader}>
            <h2>Security Alerts</h2>
            <button 
              className={`${styles.refreshButton} ${isRefreshing ? styles.refreshing : ''}`}
              onClick={handleRefresh}
              disabled={isRefreshing}
            >
              {isRefreshing ? (
                <span className={styles.loadingSpinner}>↻</span>
              ) : (
                'Refresh'
              )}
            </button>
          </div>
          <div className={styles.alertsContainer}>
            {alerts.map(alert => (
              <div key={alert.id} className={`${styles.alertCard} ${styles[alert.severity.toLowerCase()]}`}>
                <div className={styles.alertHeader}>
                  <span className={styles.alertSeverity}>{alert.severity}</span>
                  <span className={`${styles.alertStatus} ${styles[alert.status.toLowerCase()]}`}>
                    {alert.status}
                  </span>
        </div>
                <h3>{alert.title}</h3>
                <p>{alert.description}</p>
                <div className={styles.alertFooter}>
                  <span className={styles.timestamp}>{alert.timestamp}</span>
                  <button className={styles.actionButton}>Investigate</button>
              </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default MalwareDashboard; 