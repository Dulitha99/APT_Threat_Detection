import React, { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { toast } from 'react-toastify';
import { fetchMalwareData } from '../../services/malwareService'; // Corrected path
import { MalwareEntry } from '../../mocks/malware'; // Import type directly from mock
import styles from './MalwareDashboard.module.css';
// Optional: Chart imports
// import { ResponsiveContainer, PieChart, Pie, Cell, Legend, Tooltip } from 'recharts';

const MalwareDashboard: React.FC = () => {
  // const { theme } = useTheme(); // Not needed if CSS variables handle theming
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [hashSearch, setHashSearch] = useState('');
  const [hashResults, setHashResults] = useState<any>(null); // Keep type any for now for this static part
  // const [isRefreshing, setIsRefreshing] = useState(false); // Will be replaced by isLoadingAlerts for the alerts section
  const [isHashSearching, setIsHashSearching] = useState(false);

  const {
    data: malwareQueryData,
    isLoading: isLoadingAlerts,
    isError: isErrorAlerts,
    error: errorAlerts,
    refetch: refetchAlerts,
  } = useQuery<{ data: MalwareEntry[] }>({
    queryKey: ['malwareAlerts'],
    queryFn: fetchMalwareData,
  });

  useEffect(() => {
    if (isErrorAlerts && errorAlerts) {
      toast.error(`Error loading malware alerts: ${(errorAlerts as any).message || 'Unknown error'}`);
    }
  }, [isErrorAlerts, errorAlerts]);

  const alertsData = malwareQueryData?.data || [];

  // Dummy data for running processes - kept static as per instructions
  const runningProcesses = [
    { id: 1, name: 'chrome.exe', pid: '1234', cpu: '2.5%', memory: '156MB', status: 'Running' },
    { id: 2, name: 'explorer.exe', pid: '2345', cpu: '1.2%', memory: '89MB', status: 'Running' },
    { id: 3, name: 'svchost.exe', pid: '3456', cpu: '0.8%', memory: '45MB', status: 'Running' },
  ];

  const handleRunScan = () => {
    setIsScanning(true);
    setScanProgress(0);
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          return 100;
        }
        return prev + 10;
      });
    }, 500);
  };

  const handleHashSearch = () => {
    setIsHashSearching(true);
    const dummyResults = {
      hash: hashSearch,
      lastAnalysis: '2024-03-20 15:30:00',
      detectionRatio: '45/75',
      isMalicious: true,
      type: 'Win32 EXE',
      firstSeen: '2024-03-19',
      topEngineResults: [
        { vendor: 'Microsoft', result: 'Trojan:Win32/Malware.ABC' },
        { vendor: 'Kaspersky', result: 'HEUR:Trojan.Win32.Generic' },
      ]
    };
    setTimeout(() => {
      setHashResults(dummyResults);
      setIsHashSearching(false);
    }, 1500);
  };

  // Removed handleRefresh as refetchAlerts will be used for the alerts section

  return (
    <div className={styles.dashboardContainer}> {/* Removed theme class, relying on App.css */}
      <div className={styles.dashboardHeader}>
        <h1>Malware Dashboard</h1>
        <div className={styles.headerActions}>
          <button
            className={`${styles.runScanButton} ${isScanning ? styles.scanning : ''}`}
            onClick={handleRunScan}
            disabled={isScanning}
          >
            {isScanning ? (
              <span>[Scanning...] {scanProgress}%</span>
            ) : (
              <span>[Run Scan]</span>
            )}
          </button>
        </div>
      </div>

      <div className={styles.dashboardContent}>
        <div className={styles.section}>
          <div className={styles.sectionHeader}>
            <h2>Hash Search</h2>
          </div>
          <div className={styles.hashSearch}>
            <input
              type="text"
              placeholder="Enter file hash (MD5, SHA-1, SHA-256)"
              value={hashSearch}
              onChange={(e) => setHashSearch(e.target.value)}
              className={styles.hashInput} // Ensure this class uses global input styles
            />
            <button
              className={`${styles.actionButton} ${isHashSearching ? styles.loading : ''}`} // Use a generic loading class
              onClick={handleHashSearch}
              disabled={isHashSearching}
            >
              {isHashSearching ? '[Searching...]' : '[Search Hash]'}
            </button>
          </div>
          {hashResults && (
            <div className={styles.hashResults}>
              <div className={styles.resultHeader}>
                <span className={`${styles.detectionBadge} ${hashResults.isMalicious ? styles.malicious : styles.clean}`}>
                  {hashResults.detectionRatio}
                </span>
                <span className={styles.timestamp}>Last analyzed: {hashResults.lastAnalysis}</span>
              </div>
              <div className={styles.resultDetails}>
                <p><strong>Type:</strong> {hashResults.type}</p>
                <p><strong>First Seen:</strong> {hashResults.firstSeen}</p>
                <div className={styles.engineResults}>
                  {hashResults.topEngineResults.map((result: any, index: number) => (
                    <div key={index} className={styles.engineResult}>
                      <span className={styles.vendor}>{result.vendor}:</span>
                      <span className={styles.detection}>{result.result}</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>

        <div className={styles.section}>
          <div className={styles.sectionHeader}>
            <h2>Running Processes</h2>
            <button
              className={`${styles.refreshButton} ${styles.staticFeatureButton}`} // Added static class for placeholder
              onClick={() => console.log("Static refresh for processes clicked")}
            >
              [Refresh]
            </button>
          </div>
          <div className={styles.tableContainer}>
            <table className={styles.processTable}>
              <thead>
                <tr>
                  <th>Process Name</th>
                  <th>PID</th>
                  <th>CPU Usage</th>
                  <th>Memory Usage</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {runningProcesses.map(process => (
                  <tr key={process.id}>
                    <td>{process.name}</td>
                    <td>{process.pid}</td>
                    <td>{process.cpu}</td>
                    <td>{process.memory}</td>
                    <td>
                      <span className={`${styles.status} ${styles.running}`}>
                        {process.status}
                      </span>
                    </td>
                    <td>
                      <button className={styles.actionButton}>[Details]</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        <div className={styles.section}>
          <div className={styles.sectionHeader}>
            <h2>Security Alerts</h2>
            <button
              className={`${styles.refreshButton} ${isLoadingAlerts ? styles.loading : ''}`}
              onClick={() => refetchAlerts()}
              disabled={isLoadingAlerts}
            >
              {isLoadingAlerts ? '[Refreshing...]' : '[Refresh]'}
            </button>
          </div>
          <div className={styles.alertsContainer}>
            {isLoadingAlerts && (
              <div className="loading-spinner-container" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', padding: '20px' }}>
                <div className="loading-spinner"></div>
                <p style={{ marginLeft: '10px' }}>Loading alerts...</p>
              </div>
            )}
            {isErrorAlerts && (
              <div className={styles.errorState}>
                <p>Error loading alerts: {(errorAlerts as any)?.message || 'Unknown error'}</p>
                <button onClick={() => refetchAlerts()} className={styles.actionButton}>Try Again</button>
              </div>
            )}
            {!isLoadingAlerts && !isErrorAlerts && alertsData.length === 0 && (
              <p>No malware alerts found.</p>
            )}
            {!isLoadingAlerts && !isErrorAlerts && alertsData.map(alert => (
              <div key={alert.id} className={`${styles.alertCard} ${styles[alert.severity.toLowerCase()]}`}>
                <div className={styles.alertHeader}>
                  <span className={styles.alertSeverity}>{alert.severity}</span>
                  <span className={`${styles.alertStatus} ${styles[alert.status.toLowerCase().replace(' ', '')]}`}>
                    {alert.status}
                  </span>
                </div>
                <h3>{alert.fileName} ({alert.type})</h3>
                <p>{alert.details || `File path: ${alert.filePath || 'N/A'}`}</p>
                <div className={styles.alertFooter}>
                  <span className={styles.timestamp}>{new Date(alert.timestamp).toLocaleString()}</span>
                  <button className={styles.actionButton}>[Investigate]</button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default MalwareDashboard;